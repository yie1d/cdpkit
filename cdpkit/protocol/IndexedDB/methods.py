"""
This file is generated by generator/run.py with chrome-devtools-protocol.


https://chromedevtools.github.io/devtools-protocol/tot/IndexedDB/

***************************************************
                    Methods
***************************************************
"""
from __future__ import annotations

from cdpkit.protocol._types import (
    IndexedDB,
    Storage,
)
from cdpkit.protocol.base import CDPMethod, InputModel, OutputModel


class ClearObjectStoreInput(InputModel):

    securityOrigin: str | None = None  # deprecated
    storageKey: str | None = None  # deprecated
    storageBucket: Storage.StorageBucket | None = None  # deprecated
    databaseName: str  # deprecated
    objectStoreName: str  # deprecated


class ClearObjectStore(CDPMethod[None]):  # deprecated
    """ Clears all entries from an object store. """

    INPUT_VALIDATOR = ClearObjectStoreInput
    OUTPUT_VALIDATOR = None

    def __init__(
        self,
        /,
        *,
        security_origin: str | None = None,
        storage_key: str | None = None,
        storage_bucket: Storage.StorageBucket | None = None,
        database_name: str,
        object_store_name: str
    ):
        super().__init__(
            securityOrigin=security_origin,
            storageKey=storage_key,
            storageBucket=storage_bucket,
            databaseName=database_name,
            objectStoreName=object_store_name
        )


class DeleteDatabaseInput(InputModel):

    securityOrigin: str | None = None  # deprecated
    storageKey: str | None = None  # deprecated
    storageBucket: Storage.StorageBucket | None = None  # deprecated
    databaseName: str  # deprecated


class DeleteDatabase(CDPMethod[None]):  # deprecated
    """ Deletes a database. """

    INPUT_VALIDATOR = DeleteDatabaseInput
    OUTPUT_VALIDATOR = None

    def __init__(
        self,
        /,
        *,
        security_origin: str | None = None,
        storage_key: str | None = None,
        storage_bucket: Storage.StorageBucket | None = None,
        database_name: str
    ):
        super().__init__(
            securityOrigin=security_origin,
            storageKey=storage_key,
            storageBucket=storage_bucket,
            databaseName=database_name
        )


class DeleteObjectStoreEntriesInput(InputModel):

    securityOrigin: str | None = None  # deprecated
    storageKey: str | None = None  # deprecated
    storageBucket: Storage.StorageBucket | None = None  # deprecated
    databaseName: str
    objectStoreName: str
    keyRange: IndexedDB.KeyRange  # deprecated


class DeleteObjectStoreEntries(CDPMethod[None]):  # deprecated
    """ Delete a range of entries from an object store """

    INPUT_VALIDATOR = DeleteObjectStoreEntriesInput
    OUTPUT_VALIDATOR = None

    def __init__(
        self,
        /,
        *,
        security_origin: str | None = None,
        storage_key: str | None = None,
        storage_bucket: Storage.StorageBucket | None = None,
        database_name: str,
        object_store_name: str,
        key_range: IndexedDB.KeyRange
    ):
        super().__init__(
            securityOrigin=security_origin,
            storageKey=storage_key,
            storageBucket=storage_bucket,
            databaseName=database_name,
            objectStoreName=object_store_name,
            keyRange=key_range
        )


class Disable(CDPMethod[None]):  # deprecated
    """ Disables events from backend. """

    INPUT_VALIDATOR = None
    OUTPUT_VALIDATOR = None


class Enable(CDPMethod[None]):  # deprecated
    """ Enables events from backend. """

    INPUT_VALIDATOR = None
    OUTPUT_VALIDATOR = None


class RequestDataInput(InputModel):

    securityOrigin: str | None = None  # deprecated
    storageKey: str | None = None  # deprecated
    storageBucket: Storage.StorageBucket | None = None  # deprecated
    databaseName: str  # deprecated
    objectStoreName: str  # deprecated
    indexName: str  # deprecated
    skipCount: int  # deprecated
    pageSize: int  # deprecated
    keyRange: IndexedDB.KeyRange | None = None  # deprecated


class RequestDataOutput(OutputModel):

    objectStoreDataEntries: list[IndexedDB.DataEntry]  # deprecated
    hasMore: bool  # deprecated


class RequestData(CDPMethod[RequestDataOutput]):  # deprecated
    """ Requests data from object store or index. """

    INPUT_VALIDATOR = RequestDataInput
    OUTPUT_VALIDATOR = RequestDataOutput

    def __init__(
        self,
        /,
        *,
        security_origin: str | None = None,
        storage_key: str | None = None,
        storage_bucket: Storage.StorageBucket | None = None,
        database_name: str,
        object_store_name: str,
        index_name: str,
        skip_count: int,
        page_size: int,
        key_range: IndexedDB.KeyRange | None = None
    ):
        super().__init__(
            securityOrigin=security_origin,
            storageKey=storage_key,
            storageBucket=storage_bucket,
            databaseName=database_name,
            objectStoreName=object_store_name,
            indexName=index_name,
            skipCount=skip_count,
            pageSize=page_size,
            keyRange=key_range
        )


class GetMetadataInput(InputModel):

    securityOrigin: str | None = None  # deprecated
    storageKey: str | None = None  # deprecated
    storageBucket: Storage.StorageBucket | None = None  # deprecated
    databaseName: str  # deprecated
    objectStoreName: str  # deprecated


class GetMetadataOutput(OutputModel):

    entriesCount: float  # deprecated
    keyGeneratorValue: float  # deprecated


class GetMetadata(CDPMethod[GetMetadataOutput]):  # deprecated
    """ Gets metadata of an object store. """

    INPUT_VALIDATOR = GetMetadataInput
    OUTPUT_VALIDATOR = GetMetadataOutput

    def __init__(
        self,
        /,
        *,
        security_origin: str | None = None,
        storage_key: str | None = None,
        storage_bucket: Storage.StorageBucket | None = None,
        database_name: str,
        object_store_name: str
    ):
        super().__init__(
            securityOrigin=security_origin,
            storageKey=storage_key,
            storageBucket=storage_bucket,
            databaseName=database_name,
            objectStoreName=object_store_name
        )


class RequestDatabaseInput(InputModel):

    securityOrigin: str | None = None  # deprecated
    storageKey: str | None = None  # deprecated
    storageBucket: Storage.StorageBucket | None = None  # deprecated
    databaseName: str  # deprecated


class RequestDatabaseOutput(OutputModel):

    databaseWithObjectStores: IndexedDB.DatabaseWithObjectStores  # deprecated


class RequestDatabase(CDPMethod[RequestDatabaseOutput]):  # deprecated
    """ Requests database with given name in given frame. """

    INPUT_VALIDATOR = RequestDatabaseInput
    OUTPUT_VALIDATOR = RequestDatabaseOutput

    def __init__(
        self,
        /,
        *,
        security_origin: str | None = None,
        storage_key: str | None = None,
        storage_bucket: Storage.StorageBucket | None = None,
        database_name: str
    ):
        super().__init__(
            securityOrigin=security_origin,
            storageKey=storage_key,
            storageBucket=storage_bucket,
            databaseName=database_name
        )


class RequestDatabaseNamesInput(InputModel):

    securityOrigin: str | None = None  # deprecated
    storageKey: str | None = None  # deprecated
    storageBucket: Storage.StorageBucket | None = None  # deprecated


class RequestDatabaseNamesOutput(OutputModel):

    databaseNames: list[str]  # deprecated


class RequestDatabaseNames(CDPMethod[RequestDatabaseNamesOutput]):  # deprecated
    """ Requests database names for given security origin. """

    INPUT_VALIDATOR = RequestDatabaseNamesInput
    OUTPUT_VALIDATOR = RequestDatabaseNamesOutput

    def __init__(
        self,
        /,
        *,
        security_origin: str | None = None,
        storage_key: str | None = None,
        storage_bucket: Storage.StorageBucket | None = None
    ):
        super().__init__(
            securityOrigin=security_origin,
            storageKey=storage_key,
            storageBucket=storage_bucket
        )
