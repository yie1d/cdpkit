# Module template string for generating protocol module files
MODULE_TEMPLATE = """\"\"\"
This file is generated by generator/run.py based on the Chrome DevTools Protocol.

{description}
https://chromedevtools.github.io/devtools-protocol/tot/{domain}/

***************************************************
                    {hints}
***************************************************
\"\"\"
from __future__ import annotations

import enum
from typing import Any, Literal
from cdpkit.protocol.base import CDPObject, InputModel, OutputModel, CDPEvent, CDPMethod, JSON_DICT
{ref_imports}

{main_code}
"""


# Common types module template string for generating a module containing all domain types
COMMON_TYPES_MODULE_TEMPLATE = """\"\"\"
This file is generated by generator/run.py based on the Chrome DevTools Protocol.

All domain types in this module:
    To solve mutual import issues, all types are stored here uniformly
\"\"\"

from __future__ import annotations

import enum
from typing import Any, Literal
from cdpkit.protocol.base import CDPObject, JSON_DICT

{types_code}

{types_for_class}
"""

# Class template string defining the code structure for a class
CLASS_TEMPLATE = """
class {class_name}{parent}:{tips}
{description}
{properties}
{functions}
"""

# Property template string defining the code structure for class properties
PROPERTY_TEMPLATE = """{name}{hint}{value}{tips}"""


def make_class(
    class_name: str,
    parent: str = '',
    tips: str = '',
    description: str = '',
    properties: str = '',
    functions: str = '',
) -> str:
    """
    Generate a Python class code string based on the provided parameters.

    Args:
        class_name (str): Name of the class
        parent (str, optional): Parent class name, default is empty
        tips (str, optional): Class comments, default is empty
        description (str, optional): Class description (docstring), default is empty
        properties (str, optional): Class property code, default is empty
        functions (str, optional): Class method code, default is empty

    Returns:
        str: Generated class code string
    """
    return CLASS_TEMPLATE.format(
        class_name=class_name,
        parent=f'({parent})' if parent else '',
        tips=f'  # {tips}' if tips else '',
        description=description,
        properties=properties,
        functions=functions,
    )


def make_property(
    name: str,
    hint: str | None = None,
    value: str | None = None,
    tips: str | None = None
) -> str:
    """
    Generate a class property code string.

    Args:
        name (str): Property name
        hint (str | None, optional): Type hint, default is None
        value (str | None, optional): Default value, default is None
        tips (str | None, optional): Property comments, default is None

    Returns:
        str: Generated property code string
    """
    return PROPERTY_TEMPLATE.format(
        name=name,
        hint=f': {hint}' if hint else '',
        value=f' = {value}' if value else '',
        tips=f'  # {tips}' if tips else '',
    )


def make_ref_imports(
    ref_imports: set | None = None
) -> str:
    """
    Generate import statements for referenced types.

    Args:
        ref_imports (set | None, optional): Set of referenced type names, default is None

    Returns:
        str: Generated import statement string
    """
    if ref_imports:
        return f'from cdpkit.protocol._types import (\n    {"    ".join([f'{_}, \n' for _ in ref_imports])})'
    return ''


def make_methods_init(
    init_input_properties: str,
    init_super_use_properties: str
):
    """
    Generate the __init__ method code for a class.

    Args:
        init_input_properties (str): Input parameter code for the __init__ method
        init_super_use_properties (str): Parameter code passed to the parent class's __init__ method

    Returns:
        str: Generated initialization method code (including parameter validation and parent call)
    """
    if init_input_properties and init_super_use_properties:
        return f"""
    def __init__(
        self,
        *,
{init_input_properties}
    ):
        super().__init__(
{init_super_use_properties}
        )
        """
    return ''


def make_common_types_module(
    types_code: str,
    types_for_class: str,
) -> str:
    """
    Generate common types module code.

    Args:
        types_code (str): Code string for all type definitions
        types_for_class (str): Code string for the type collection class

    Returns:
        str: Complete common types module code (including header comments and type definitions)
    """
    return COMMON_TYPES_MODULE_TEMPLATE.format(
        types_code=types_code,
        types_for_class=types_for_class
    )


def make_module(
    domain: str,
    description: str,
    ref_imports: str,
    main_code: str,
    hints: str
):
    """
    Generate protocol module file code.

    Args:
        domain (str): Domain name (e.g., "Network", "Page")
        description (str): Module description (docstring content)
        ref_imports (str): Reference import statements
        main_code (str): Module body code (class definitions, etc.)
        hints (str): Module category hint (e.g., "Types", "Events")

    Returns:
        str: Complete module file code (including header comments and body logic)
    """
    return MODULE_TEMPLATE.format(
        domain=domain,
        description=description,
        hints=hints.title(),
        ref_imports=ref_imports,
        main_code=main_code
    )
