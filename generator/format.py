MODULE_TEMPLATE = """\"\"\"
This file is generated by generator/run.py with chrome-devtools-protocol.

{description}https://chromedevtools.github.io/devtools-protocol/tot/{domain}/
\"\"\"
from __future__ import annotations

import enum
from typing import Any, Literal
from cdpkit.common import CDPObject, InputModel, OutputModel, CDPEvent, CDPMethod, JSON_DICT
from cdpkit.protocol._types import {domain} as {domain}Types
{ref_imports}

{all_types_code}

{all_methods_code}

{all_events_code}
"""

SPLIT_HINTS_TEMPLATE = """\"\"\"
***************************************************
                    {hints}
***************************************************
\"\"\"
"""

TYPES_MODULE_TEMPLATE = """\"\"\"
This file is generated by generator/run.py with chrome-devtools-protocol.

All domain types in this module:
    In order to solve all the problems of importing from each other, all types are stored here
\"\"\"

from __future__ import annotations

import enum
from typing import Any, Literal
from cdpkit.common import CDPObject, JSON_DICT

__all__ = [
{module_all}
]

{types_code}

{types_for_class}
"""

CLASS_TEMPLATE = """
class {class_name}{parent}:{tips}
{description}
{properties}
{functions}
"""

PROPERTY_TEMPLATE = """{name}{hint}{value}{tips}\n"""

TYPES_SIMPLE_TEMPLATE = """{description}
{name} = {value}\n"""



def make_types_module(
    module_all: str,
    types_code: str,
    types_for_class: str,
):
    return TYPES_MODULE_TEMPLATE.format(
        module_all=module_all,
        types_code=types_code,
        types_for_class=types_for_class
    )


def make_class(
    class_name: str,
    parent: str = '',
    tips: str = '',
    description: str = '',
    properties: str = '',
    functions: str = '',
):
    return CLASS_TEMPLATE.format(
        class_name=class_name,
        parent=f'({parent})' if parent else '',
        tips=f'  # {tips}' if tips else '',
        description=description,
        properties=properties,
        functions=functions,
    )


def make_property(
    name: str,
    hint: str | None = None,
    value: str | None = None,
    tips: str | None = None
):
    return PROPERTY_TEMPLATE.format(
        name=name,
        hint=f': {hint}' if hint else '',
        value=f' = {value}' if value else '',
        tips=f'  # {tips}' if tips else '',
    )
